#!/usr/bin/env resty
local req = require('grantmacken.req')
local sContainerName = 'ex'
local sDomain = os.getenv("DOMAIN")
local sAuth = os.getenv("EXIST_AUTH")
local sAddress, sMsg = req.getAddress( sContainerName )
local sURL =  'http://' .. sAddress .. ':8080/exist/rest/db/apps/' .. sDomain
local sHost = req.http:parse_uri(sURL)[2]
local iPort = req.http:parse_uri(sURL)[3]
local sPath = req.http:parse_uri(sURL)[4]
local sConnect = req.connect( sAddress, iPort )
ngx.say( sMsg )
ngx.say( sConnect )

local xQuery = [[
<query xmlns="http://exist.sourceforge.net/NS/exist"
 start='1'
 max='9999'
 wrap="no">
<text>
<![CDATA[
xquery version "3.1";
try{
 let $nl := "&#10;"
 return(
 ' version: ' || system:get-version() || $nl ,
 '   build:  ' || system:get-build() || $nl ,
 ' revision: ' || system:get-revision() || $nl ,
 '     home: ' || system:get-exist-home() || $nl ,
 'repo root: ' || repo:get-root() || $nl ,
 '--------------------------------------------------------',  $nl ,
 ' max memory eXist can use: ' || system:get-memory-max() || $nl ,
 '      total memory in use: ' || system:get-memory-total() || $nl ,
 '    free memory available: ' || system:get-memory-free() || $nl ,
 '            system uptime: ' || system:get-uptime()  || $nl ,
 '--------------------------------------------------------',  $nl ,
 '       request: ' || request:exists()  || $nl,
 '    host-name : ' || request:get-hostname()  || $nl,
 '       method : ' || request:get-method()  || $nl,
 ' effective-uri: ' || request:get-effective-uri()  || $nl,
 '  remote-addr : ' || request:get-remote-addr()  || $nl,
 '  remote-host : ' || request:get-remote-host()  || $nl,
 '  remote-port : ' || request:get-remote-port()  || $nl,
 '  server-name : ' || request:get-server-name()  || $nl,
 '  servlet-path : ' || request:get-servlet-path()  || $nl,
 '  remote-scheme : ' || request:get-scheme()  || $nl,
 '  multipart-content : ' || request:is-multipart-content()  || $nl,
 '  uri : ' || request:get-uri()  || $nl,
 '  url : ' || request:get-url()  || $nl,
 '  path-info : ' || request:get-path-info()  || $nl,
 '  context-path : ' || request:get-context-path()  || $nl,
 '  attribute-names : ' ||  request:attribute-names() || $nl,
 '        current-user: ' || xmldb:get-current-user()  || $nl,
 ' is current user dba: ' || sm:is-dba(xmldb:get-current-user()) || $nl ,
 '    is-authenticated: ' || sm:is-authenticated() || $nl ,
 '    is-authenticated: ' || sm:is-authenticated() || $nl ,
 '--------------------------------------------------------',  $nl ,
  '  expath package TITLE: ' || doc( request:get-path-info() ||  '/expath-pkg.xml')/*/*,  $nl ,
  'expath package VERSION: ' || doc( request:get-path-info() ||  '/expath-pkg.xml')//@version/string() ,  $nl ,
 '--------------------------------------------------------',  $nl ,
 '     repo DESCRIPTION: ' || doc(  request:get-path-info() ||  '/repo.xml')//repo:description/string(),$nl ,
 '--------------------------------------------------------',  $nl ,
 ' scheduled jobs: ' || system:get-scheduled-jobs() || $nl ,
 '--------------------------------------------------------',  $nl ,
 '         vendor: ' || util:system-property('vendor') || $nl ,
 '     vendor-url: ' || util:system-property('vendor-url' ) || $nl ,
 '   product-name: ' || util:system-property('product-name') || $nl ,
 'product-version: ' || util:system-property('product-version') || $nl ,
 '  product-build: ' || util:system-property('product-build') || $nl ,
 '      java.home: ' || util:system-property('java.home') || $nl ,
 '   java.version: ' || util:system-property('java.version') || $nl ,
 '        os.arch: ' || util:system-property('os.arch') || $nl ,
 '        os.name: ' || util:system-property('os.name') || $nl ,
 '      user.home: ' || util:system-property('user.home') || $nl,
 '      user.name: ' || util:system-property('user.name') || $nl,
 '--------------------------------------------------------',  $nl,
 ' available environment variables',  $nl,
 '--------------------------------',  $nl,
 for-each(
  available-environment-variables(),
  function( $item ){ $item || ': '  ||  environment-variable($item) || $nl } ), $nl,
 '--------------------------------------------------------',  $nl ,
 $nl
)
} catch * {()}
]] ..']]>' .. [[
</text>
</query>
]]

local tHeaders = {}
tHeaders["Authorization"]  = 'Basic ' .. sAuth
tHeaders['Content-Type'] = 'application/xml'
tHeaders ["Host"] =  sDomain
tHeaders['Accept'] = 'text/plain'

local tRequest = {
  version = 1.1,
  method = "POST",
  path = sPath,
  headers = tHeaders,
  body = xQuery
}

req.http:set_timeout(3000)
local response, err = req.http:request( tRequest )
if not response then
  ngx.say(' - ERR: failed to get response: ' .. err)
  ngx.say(' - exiting ... '  )
  ngx.exit()
end

local rBody
if response.has_body then
  rBody, err = response:read_body()
  if not rBody then
    ngx.say("ERR: failed to read_body: ", err)
    ngx.exit()
  end
end
local closed, err = req.http:close()
if not closed then
    ngx.say("ERR: failed to close connection: ", err)
    ngx.exit()
end

ngx.say( rBody )
