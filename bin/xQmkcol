#!/usr/bin/env resty
if table.getn(arg) ~= 1 then
  print(' usage: requires 1 param [ db-path ] ')
  ngx.exit()
end

-- function read(f)
--   local open     = io.open
--   local f, e = open(f, "rb")
--   if not f then
--     return nil, e
--   end
--   local c = f:read "*a"
--   f.close()
--   return c
-- end

local DBPATH = arg[1]

local http = require("resty.http")
local httpc = http.new()
local resolver = require("resty.dns.resolver")
--- docker DNS resolver: 127.0.0.11
local r, err, ans, ok
r, err = resolver:new{nameservers = {'127.0.0.11'}}
if not r then
  ngx.say("failed to instantiate resolver: ", err)
end
ans, err = r:query("ex.", { qtype = r.TYPE_A })
if not ans then
  ngx.say("failed to query: ", err)
end
local ok, err = httpc:connect(ans[1].address,8080)
if not ok then
  ngx.say("ERR: Failed to connect ", err)
  -- ngx.exit()
end
-- ngx.say('connected to '  .. ans[1].address ..  ' on port  8080')
local restPath = '/exist/rest/db/apps/'
-- ngx.say( ' - restPath'  .. restPath)
local auth = 'Basic ' .. os.getenv("EXIST_AUTH")

local xQuery = [[
<query xmlns="http://exist.sourceforge.net/NS/exist"
 start='1'
 max='9999'
 wrap="no">
<text>
<![CDATA[
xquery version "3.1";
declare function local:mkcol-recursive($collection, $components) {
    if (exists($components)) then
        let $newColl := concat($collection, "/", $components[1])
        return (
            if(xmldb:collection-available( $newColl)) then ()
            else( xmldb:create-collection($collection, $components[1])),
            local:mkcol-recursive($newColl, subsequence($components, 2))
        )
    else
      ()
};

declare function local:mkcol($collection, $path) {
    local:mkcol-recursive($collection, tokenize($path, "/"))
};

local:mkcol("/db", substring-after( "]] .. DBPATH .. [[" , "/db/"))
]] ..']]>' .. [[
</text>
</query>
]]

local req = {
  version = 1.1,
  method = "POST",
  path = restPath,
  headers = {
    ["Content-Type"] =  'application/xml',
    ["Authorization"] = auth
  },
  body = xQuery
}
local res =  httpc:request( req )
local oBody
if res.has_body then
  local sBody, err = res:read_body()
  if not sBody then
    ngx.say("ERR: failed to read_body: ", err)
    ngx.say(' - exiting ... '  )
    ngx.exit()
  end
  if sBody ~= '' then
    -- ngx.say('INFO: has body type: : [ ' .. type( sBody ) .. ' ] ')
    ngx.say( sBody )
  end
end

