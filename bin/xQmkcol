#!/usr/bin/env resty
if table.getn(arg) ~= 1 then
  print(' usage: requires 1 param [ data-path ] ')
  ngx.exit()
end

local DATA_PATH = arg[1]
local req = require('grantmacken.req')
local sContainerName = 'ex'
local sDomain = os.getenv("DOMAIN")
local sAuth = os.getenv("EXIST_AUTH")
local sAddress, sMsg = req.getAddress( sContainerName )
local sURL =  'http://' .. sAddress .. ':8080/exist/rest/db/data/' .. sDomain
local sHost = req.http:parse_uri(sURL)[2]
local iPort = req.http:parse_uri(sURL)[3]
local sPath = req.http:parse_uri(sURL)[4]
local sConnect = req.connect( sAddress, iPort )
local sAction = 'local:mkcol(request:get-path-info(),"' .. DATA_PATH .. '")'

local xQuery = [[
<query xmlns="http://exist.sourceforge.net/NS/exist"
 start='1'
 max='9999'
 wrap="no">
<text>
<![CDATA[
xquery version "3.1";
declare function local:mkcol-recursive($collection, $components) {
    if (exists($components)) then
        let $newColl := concat($collection, "/", $components[1])
        return (
            if(xmldb:collection-available( $newColl)) then ()
            else( xmldb:create-collection($collection, $components[1])),
            local:mkcol-recursive($newColl, subsequence($components, 2))
        )
    else
      ()
};

declare function local:mkcol($collection, $path) {
    local:mkcol-recursive($collection, tokenize($path, "/"))
};
]] .. sAction .. [[
]] ..']]>' .. [[
</text>
</query>
]]

local tHeaders = {}
tHeaders["Authorization"]  = 'Basic ' .. sAuth
tHeaders['Content-Type'] = 'application/xml'
tHeaders ["Host"] =  sDomain
tHeaders['Accept'] = 'text/plain'

local tRequest = {
  version = 1.1,
  method = "POST",
  path = sPath,
  headers = tHeaders,
  body = xQuery
}

req.http:set_timeout(10000)
local response, err = req.http:request( tRequest )
if not response then
  ngx.say(' - ERR: failed to get response: ' .. err)
  ngx.say(' - exiting ... '  )
  ngx.exit()
end

local rBody
if response.has_body then
  rBody, err = response:read_body()
  if not rBody then
    ngx.say("ERR: failed to read_body: ", err)
    ngx.exit()
  end
end

local closed, err = req.http:close()
if not closed then
    ngx.say("ERR: failed to close connection: ", err)
    ngx.exit()
end

ngx.say( rBody )
