#!/usr/bin/env resty
if table.getn(arg) < 1  or table.getn(arg)  > 2 then
  print(' usage: requires 1 or 2 params [ route  perm? ] ')
  ngx.exit()
end

local ROUTE = arg[1]
local PERM
if not arg[2] then
  PERM = 'rwxr-xr-x'
end
local say = ngx.say
local exit = ngx.exit
-- say( ' - ROUTE ' .. ROUTE )
-- say( ' - PERM ' .. PERM )
-- local cjson  = require('cjson')
-- local prty = require('resty.prettycjson')
local req = require("grantmacken.req")
if ( type(os.getenv("EXIST_AUTH")) ~= 'string' ) then
  exit()
end
if ( type(os.getenv("DOMAIN")) ~= 'string' ) then
  exit()
end
local sAuth =  os.getenv("EXIST_AUTH")
--[[
-- use eXwraper pettern
local sDeclare = ''
local sLet = ''
local sReturn = ''  
local oWrap = {
    ['sDeclare'] = sDeclare,
    ['sLet'] = sLet,
    ['sReturn'] = sReturn
  }
  local oReq = {
    ['path'] = '/exist/rest/db',
    ['auth'] =  sAuth,
    ['method'] = 'POST',
    ['contentType'] = 'application/xml',
    ['data'] = req.eXwrapper(oWrap)
  }
local res = req.eX(oReq)

--]]

local sDeclare = ''
local sLet = [[
let $nl := "&#10;"
let $route  := ']] .. ROUTE .. [['
let $perm  := ']] .. PERM .. [['
]]

local sReturn = [[
 if( util:binary-doc-available($route)) then (
 ' - route: ' || $route , $nl,
 if( sm:get-permissions(xs:anyURI($route))//@mode/string() eq $perm ) then ()
 else (sm:chmod(xs:anyURI($route),$perm )),
 ' - permisions: ' || sm:get-permissions(xs:anyURI($route))//@mode/string(),
 $nl
 ) else (
 util:binary-doc-available($route)
 )
]]

local oWrap = {
    ['sDeclare'] = sDeclare,
    ['sLet'] = sLet,
    ['sReturn'] = sReturn
  }

local oReq = {
  ['path'] = '/exist/rest/db',
  ['auth'] =  sAuth,
  ['method'] = 'POST',
  ['contentType'] = 'application/xml',
  ['data'] = req.eXwrapper(oWrap)
}
local res = req.eX(oReq)
say(' - eXist response: ' ,  res.reason )

local resBody, err = res:read_body()
if not resBody then
  local msg = "failed to read data: " .. err
  say( msg )
  exit()
end

say( resBody )
