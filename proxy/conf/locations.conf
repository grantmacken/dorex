#           LOCATIONS
###################################
# In Server block before location directives
# @ see: http://nginx.org/en/docs/varindex.html 

location ~* ^/pages/echo.html$ {
  default_type text/plain;
  # echo nginx_version $nginx_version;  
  # echo time_iso8601 $time_iso8601;
  # echo uri normalised $uri;
  # echo request_filename $request_filename;
  # echo The current request uri is $request_uri;
  # echo domain  $domain;
  # echo nginx_http_v2: $http2;
#  echo $ssl_preread_server_name;
  # echo $request_id;
  # echo $host;
  # echo $server_port;
  # echo $server_name;
  # echo $server_addr;
  # echo $ssl_server_name;
  # echo document_uri: $document_uri; 
  # echo document_root: $document_root; 
  # echo realpath_root: $realpath_root;
  # echo note:  request file name ;
  # echo file path for the current request, based on the root or alias directives, and the request URI;
  # echo note: try files will look here;
  # echo request_filename $request_filename;
  # echo https: $https;
  # echo STUB STATUS ;
  # echo  Module ngx_http_browser_module; 
  # echo ancient_browser: $ancient_browser;
  # echo Module ngx_http_gzip_module;
  # echo gzip_ratio: $gzip_ratio;
  # echo Enviroment Vars ;
  echo : $eXistHome;
}

# echo geoip_area_code: $geoip_area_code; 

# location ~* ^/media/(.+)$ {
#   expires max;
#   gzip off;
#   gzip_static  off;
#   root $fsDataPath;
# }

location ~* ^/(tags|pages|posts)/(.+)$ {
 try_files $uri @proxy;
}

location @proxy {
  # include       proxy-cache.conf;
  rewrite ^/?(.*)$ /exist/restxq/$domain/$1 break;
  proxy_pass http://ex:8080;
}

# gzip_ratio


location ~* ^(/resources/(styles|scripts)/.+)$ {
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
}

###############################################################################
# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

location ~* ^(/resources/images/.+)$ {
  gzip_static  off;
  expires max;
  root html/$domain;
  try_files  $uri.png $uri.jpeg $uri.gif;
  # log_not_found off;
}

location ~* ^(/resources/icons.+)$ {
  add_header Content-Type image/svg+xml;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  root html/$domain;
  # log_not_found off;
}

include location_micropub.conf;
include location_existdb.conf;
include location_exData.conf;


# location ~* ^/_webhook$  {
#   content_by_lua_block {
#     ngx.log(ngx.INFO, "Content by lua block")
#     require("grantmacken.deploy").processRequest()
#     ngx.say("webhook")
#   }
# }



# location ~* ^/_webmention$  {
#   content_by_lua_block {
#     ngx.log(ngx.INFO, "Content by lua block")
#     --ngx.say("Content by lua block")
#     require("grantmacken.webmention").processRequest()
#   }
# }



