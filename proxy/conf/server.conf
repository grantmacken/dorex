# HTTPS server 
server {
  listen 443      ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;
  server_name  ~^(www\.)?(?<domain>.+)$;
# path to static files 'html' is docker volume 
  root html;
  index index.html;
# specify charset
  charset utf-8;

#           Certificates
##################################################
  include certs.conf;
  include tls.conf;
  include headers.conf;
  # include destroy-cookie.conf;
  # phase: right before ssl handshake
  # set globals for server rewrites context
#################################################
  set_by_lua_block $exAuth { return os.getenv("EXIST_AUTH") }
  set_by_lua_block $eXistHome { return os.getenv("EXIST_HOME") }
  # set_by_lua_block $twitterAuth { return  os.getenv("TWITTER_AUTH") }

# LOCATIONS
############

#Drop
location = /favicon.ico {
  access_log off;
  log_not_found off;
}

# Exposed Interaction Endpoints for Domain
# 1. micropub

location ~* "^/?micropub([?]{1}.+)?$" {
  access_by_lua_block{
    require("grantmacken.access").verifyToken()
  }
  content_by_lua_block {
   require("grantmacken.micropub").processRequest()
  }
}

location ~* "^/?_login([?]{1}.+)?$" {
  access_by_lua_block{
    require("grantmacken.access").indieLoginVerifyAuthorizationCode( )
  }
}

# Proxied locations
# 1. home page eg.  '' , '/' '/index'  '/index.html'
# 2. categories e.g. /tags/xxx
# 3. archived posts in the form of a short url
# 4. archived binary-media and associated media-link doc in the form of a short url


location ~* ^/(index|index.html)?$ {
  rewrite "^.*$" /pages/home.html break;
#  reomove as per webhint
  try_files $uri @proxy;
}

location ~* /tags/.+ {
  rewrite "^/tags/([\w]+)$" /tags/$1.html break;
  try_files $uri @proxy;
}

# published notes,articles
#  consists of 5 chars
#   char 1 is the ' kind of post' tag identifier e.g. n = note, a = article
#   char 2,3,4 is the base 60 for short date number
#     short-date-number =  year '00' plus days in year '000' e.g. 16001
#   char 5 is the nth number of an 'kind of post' published that day
#  example: n3Uo1 = the first note published on 2016-07-06
location ~* "^/[na]{1}[0-9A-HJ-NP-Z_a-km-z]{4}$" {
   rewrite "^/(.+)$" /posts/$1.html break;
   try_files $uri @proxy;
}

# published media-binary files
# consists of 5 chars
# - char 1 M(edia)
# - char 2,3,4  base60 date
# - char 5 the increment count of the file added that day

location ~* "^/[M]{1}[0-9A-HJ-NP-Z_a-km-z]{4}\.(png|jpg|gif)$" {
   rewrite "^/(.+)$" /media/$1 break;
   try_files $uri @mediaProxy;
}

# the associated media-link doc
location ~* "^/[m]{1}[0-9A-HJ-NP-Z_a-km-z]{4}$" {
   rewrite "^/(.+)$" /uploads/$1 break;
   try_files $uri @proxy;
}

location @proxy {
  # include       proxy-cache.conf;
  rewrite ^/?(.*)$ /exist/restxq/$domain/$1 break;
  # expires max;
  # only for html pages
  add_header Strict-Transport-Security max-age=15768000;
  #  cookies 
  #  io block: do not waste band width
  ##############################################
  proxy_hide_header       Set-Cookie;
  proxy_ignore_headers    Set-Cookie;
  # # important! Remember the special inheritance rules for proxy_set_header:
  # # http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_set_header
  proxy_set_header        Cookie "";
  proxy_pass http://ex:8080;
}

location @mediaProxy {
  # include       proxy-cache.conf;
  rewrite ^/?(.*)$ /exist/restxq/$domain/$1 break;
  proxy_pass http://ex:8080;
}

# APP RESOURCES
###############################################################################
# IMAGES
# look for images on disk,
# images don't have to have an extension ref. try files
# don't bother to gzip or look for gzip file
# make *browser cache* images with expires set to max into the future
# nginx declaration 'expires max' sets both expires and cache-control headers
# nginx sets 'etag on' automatically, setting both etag and last-modified
###############################################################################

location ~* /images/\d+/.+ {
  rewrite "^/(images)/(?<imgSize>\d{2,4})/(\w+)([?\.]{1}\w+)?$" /resources/$1/$imgSize/$3 break;
  gzip_static  off;
  # more_set_headers    "Cache-Control: public,max-age=31536000,immutable";
  expires max;
  root html/$domain;
  try_files  $uri.png $uri.jpeg $uri.gif;
  # log_not_found off;
}

###############################################################################
# ICONS
# anything in the icons dir is served as image/svg+xml
# resource is a gzipped svg so has extension svgz
# url does(should) not need an extension so rewrite creates one (always svgz)
# even if request is for svg
###############################################################################

location ~* /icons/.+ {
  rewrite "^/(icons)/(\w+)([?\.]{1}\w+)?$" /resources/$1/$2.svgz break;
  more_set_headers    "Content-Type: image/svg+xml; charset=utf-8";
  #more_set_headers    "Cache-Control: public,max-age=31536000,immutable";
  add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  add_header Content-Encoding gzip;
  expires max;
  root html/$domain;
  # log_not_found off;
}

### STYLES
#############
# The ngx_http_gzip_static_module module allows sending
# precompressed files with the “.gz”
# filename extension instead of regular files.

location  = /styles {
  rewrite "^/?styles$" /resources/styles/main.css break;
  more_set_headers    "Content-Type: text/css; charset=utf-8";
  add_header X-Content-Type-Options nosniff;
  add_header Strict-Transport-Security max-age=15768000;
  add_header Vary Accept-Encoding;
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
  # log_not_found off;
}
### SCRIPTS
#############

location  = /scripts {
  rewrite "^/?scripts$" /resources/scripts/main.js break;
  expires max;
  gzip off;
  gzip_static  always;
  gunzip on;
  root html/$domain;
  # log_not_found off;
}

}
