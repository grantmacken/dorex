#  HTTP server
server {
  root html;
  index index.html;
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name ~^(www\.)?(?<domain>.+)$;

  # # Endpoint used for performing domain verification with Let's Encrypt.
  # location /.well-known/acme-challenge {
  #   default_type "text/plain";
  #   allow all;
  # }

  # location = /favicon.ico {
  #   log_not_found off;
  # }

  # location / {
  #   content_by_lua_block {
  #     ngx.log(ngx.INFO, " log test 1 ")
  #     ngx.say("Content by lua block: " ..  ngx.var.domain )
  #     ngx.exit(200)
  #   }
  # }
  
  # PHASES TWITTER_AUTH
    # before locations insert server-rewrite phase
    include rewrites.conf;  # src/nginx/conf/rewrites.conf
    #  include locations.conf; # src/nginx/conf/locations.conf

  location ~* ^/pages/echo.html$ {
  default_type text/plain;
  echo nginx_version $nginx_version \n;
  echo time_iso8601 $time_iso8601;
  echo uri normalised $uri;
  echo request_filename $request_filename;
  echo The current request uri is $request_uri;
  echo domain  $domain;
  echo nginx_http_v2: $http2;
#  echo $ssl_preread_server_name;
  # echo $request_id;
  # echo $host;
  # echo $server_port;
  # echo $server_name;
  # echo $server_addr;
  # echo $ssl_server_name;
  echo document_uri: $document_uri; 
  echo document_root: $document_root; 
  echo realpath_root: $realpath_root;
  echo note:  request file name ;
  echo file path for the current request, based on the root or alias directives, and the request URI;
  echo note: try files will look here;
  echo request_filename $request_filename;
  echo https: $https;
  # echo STUB STATUS ;
  # echo connections_active: $connections_active;
  # echo  Module ngx_http_browser_module; 
  # echo ancient_browser: $ancient_browser;
  # echo Module ngx_http_gzip_module;
  # echo gzip_ratio: $gzip_ratio;
  # echo Enviroment Vars ;
  #  # echo eXistHome: $eXistAuth;
  #  echo eXistHome:$eXistHome;
  #  echo eXistDataDir :eXistDataDir;
  #  echo fsAssetsPath: $fsAssetsPath;
}






  location ~* ^/(tags|pages|posts)/(.+)$ {
  try_files $uri @proxy;
  }

  location @proxy {
    # include       proxy-cache.conf;
    rewrite ^/?(.*)$ /exist/restxq/$domain/$1 break;
    proxy_pass http://exist:8080;
  }


# gzip_ratio

location ~* ^(/resources/(styles|scripts)/.+)$ {
  # expires max;
  # gzip off;
  # gzip_static  always;
  # gunzip on;
  # root $fsAssetsPath;
}


   error_page 497 =302 https://$host$request_uri;
   error_page 497 =301 https://$host$request_uri;
}

